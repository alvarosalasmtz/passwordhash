import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Arrays;

public class PasswordHashing {
  
  private static final int SALT_LENGTH = 16; // Longitud del salt en bytes
  private static final String PEPPER = "s3cr3tP3pper"; // Pepper secreto
  private static final int ITERATIONS = 10000; // Número de iteraciones para el hash
  
  public static void main(String[] args) {
    String password = "mypassword123"; // Contraseña a hashear
    byte[] salt = generateSalt(); // Generar un salt aleatorio
    String hashedPassword = hashPassword(password, salt); // Hashear la contraseña con el salt y pepper
    System.out.println("Contraseña hasheada: " + hashedPassword);
    boolean isValid = validatePassword(password, hashedPassword, salt); // Validar la contraseña ingresada
    System.out.println("La contraseña es válida: " + isValid);
  }
  
  // Genera un salt aleatorio
  private static byte[] generateSalt() {
    SecureRandom random = new SecureRandom();
    byte[] salt = new byte[SALT_LENGTH];
    random.nextBytes(salt);
    return salt;
  }
  
  // Hashea una contraseña usando salt y pepper
  private static String hashPassword(String password, byte[] salt) {
    try {
      MessageDigest digest = MessageDigest.getInstance("SHA-256");
      byte[] passwordBytes = password.getBytes();
      byte[] pepperBytes = PEPPER.getBytes();
      byte[] saltedPassword = new byte[passwordBytes.length + salt.length + pepperBytes.length];
      System.arraycopy(passwordBytes, 0, saltedPassword, 0, passwordBytes.length);
      System.arraycopy(salt, 0, saltedPassword, passwordBytes.length, salt.length);
      System.arraycopy(pepperBytes, 0, saltedPassword, passwordBytes.length + salt.length, pepperBytes.length);
      byte[] hashedBytes = saltedPassword;
      for (int i = 0; i < ITERATIONS; i++) {
        hashedBytes = digest.digest(hashedBytes);
      }
      return bytesToHex(salt) + bytesToHex(hashedBytes);
    } catch (NoSuchAlgorithmException e) {
      e.printStackTrace();
      return null;
    }
  }
  
  // Valida una contraseña ingresada comparando su hash con el hash guardado
  private static boolean validatePassword(String password, String hashedPassword, byte[] salt) {
    String saltHex = hashedPassword.substring(0, SALT_LENGTH * 2);
    String hashedHex = hashedPassword.substring(SALT_LENGTH * 2);
    byte[] saltBytes = hexToBytes(saltHex);
    byte[] hashedBytes = hexToBytes(hashedHex);
    String newHashedPassword = hashPassword(password, saltBytes);
    byte[] newHashedBytes = hexToBytes(newHashedPassword.substring(SALT_LENGTH * 2));
    return Arrays.equals(hashedBytes, newHashedBytes);
  }
  
  // Convierte un arreglo de bytes a una cadena hexadecimal
  private static String bytesToHex(byte[] bytes) {
    StringBuilder builder = new StringBuilder();
    for (byte b : bytes) {
      builder.append(String.format("%02x", b));
    }
    return builder.toString();
  }
  
  // Convierte una cadena hexadecimal a un arreglo de bytes
  private static byte[] hexToBytes(String hex) {
    byte[] bytes = new byte[hex.length() / 
for (int i = 0; i < hex.length(); i += 2) {
bytes[i / 2] = (byte) ((Character.digit(hex.charAt(i), 16) << 4) + Character.digit(hex.charAt(i+1), 16));
}
return bytes;
}
}

